#pragma kernel BlockNoiseGenerator

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl"

RWTexture2D<float> Output;
uint Iteration, Seed;

static const uint kThreadCount = 16;
static const uint kBufferSize = 1024;
static groupshared uint shared_buffer[kBufferSize];

void ClearBuffer()
{
    for (uint i = 0; i < kBufferSize; i++) shared_buffer[i] = 0;
}

void RunRandomFill(uint thread_id)
{
    // Secondary random seed
    uint seed2 = thread_id * 1024;

    // Random fill
    for (uint i = 0; i < Iteration; i++)
    {
        // Per-iteration random values
        uint r1 = JenkinsHash(uint2(Seed, seed2++));
        uint r2 = JenkinsHash(uint2(Seed, seed2++));
        uint r3 = JenkinsHash(uint2(Seed, seed2++));

        // Fill parameters
        uint start = r1 & (kBufferSize - 1);
        uint end = min(start + (r2 & 31), kBufferSize);
        //uint bit = 1u << (r3 & 7);
        uint bit = 1u << (uint)(pow(ConstructFloat(r3), 2) * 8);

        // Fill
        for (uint j = start; j < end; j++) shared_buffer[j] |= bit;
    }
}

void RunParallelOutput(uint group_id, uint thread_id)
{
    // Output texture dimensions
    uint w, h;
    Output.GetDimensions(w, h);

    uint read_from = kBufferSize * thread_id / kThreadCount;
    uint write_to = kBufferSize * group_id + read_from;

    for (uint i = 0; i < kBufferSize / kThreadCount; i++)
    {
        uint value = shared_buffer[read_from + i];
        uint write_idx = write_to + i;

        uint x = write_idx % w;
        uint y = write_idx / w;

        if (y < h) Output[uint2(x, y)] = value / 255.0f;
    }
}

[numthreads(kThreadCount, 1, 1)]
void BlockNoiseGenerator(uint group_id : SV_GroupID,
                         uint group_thread_id : SV_GroupThreadID,
                         uint dispatch_thread_id : SV_DispatchThreadID)
{
    // Group shared buffer clear in the first thread
    if (group_thread_id == 0) ClearBuffer();

    GroupMemoryBarrierWithGroupSync();

    // Random fill
    RunRandomFill(dispatch_thread_id);

    GroupMemoryBarrierWithGroupSync();

    // Output
    RunParallelOutput(group_id, group_thread_id);
}
